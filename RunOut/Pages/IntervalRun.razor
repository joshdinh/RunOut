@page "/intervalrun"

<div class="content">
    <div class="nav">
        <a href="/interval"><button id="back"> &#10094;</button></a>

        <p id="heading">@currentInterval()</p>
        <div class="date">
            <p id="number">@Calendar_Data.runs[findIndex()].day</p>
            <button disabled id="weekday">@Calendar_Data.runs[findIndex()].weekday</button>
        </div>

    </div>

    <div class="belowNav">
        <div class="nextNotif">
            <p>Next Up</p>
            <h1>@nextInterval()</h1>
        </div>

        <div class="stopwatch">
            <h1>@time</h1>
        </div>

        <div class="stats">
            <p id="statsHeading">OVERVIEW</p>
            <div id="distance">
               <div>
                    <h2>Distance</h2>
                    <p class="target">Target: @Calendar_Data.runs[findIndex()].distance km</p>
                </div>
                <p class="number">5</p>
                <p class="km">KM</p>
               
            </div>
            <div id="pace">
                <div>
                    <h2>Average Pace</h2>
                    <p class="target">Target: @Calendar_Data.runs[findIndex()].pace /km</p>
                </div>
                <p class="number">6:09</p>
                <p class="km">/KM</p>
                
            </div>
       
            <button id="start" @onclick=@toggleStart>@btnState</button>
            <a href="/runcomplete"><button id="finish">FINISH</button></a>
        </div>
    </div>
 </div>


@code {
    [CascadingParameter]
    protected Calendar_Data? Calendar_Data { get; set; }



    int intervalCount = 1;
    double intervalTime = 0.0;

    public bool paused = false;
    public string btnState = "START";

    public double hr, min, sec = 0;
    string time = "00:00";
    string formattedTime = "0 min 0 sec";
    string seconds;
    string minutes;
    bool neverInit = true;


    public int findIndex()
    {
        return Calendar_Data.runPointer;
    }

    public double intervalInfo(int count)
    {
        if (count == 1 || count == 2)
        {
            return Calendar_Data.runs[findIndex()].interval.interval1;
        }
        if (count == 3 || count == 4)
        {
            return Calendar_Data.runs[findIndex()].interval.interval2;
        }
        if (count == 5 || count == 6)
        {
            return Calendar_Data.runs[findIndex()].interval.interval3;
        }
        if (count == 7 || count == 8)
        {
            return Calendar_Data.runs[findIndex()].interval.interval4;
        }

        return 0.0;
    }

    public string currentInterval()
    {
        string interval;
        if (intervalCount % 2 == 0)
        {
            interval = "Run";
        }
        else
        {
            interval = "Walk";
        }

        interval = interval + " " + intervalCount + "/8";

        return interval;
    }

    public string nextInterval()
    {
        string intervalType;
        if(intervalCount % 2 == 0)
        {
            intervalType = "WALK";   
        }
        else
        {
            intervalType = "RUN";
        }
        return intervalType;
    }

    public void toggleStart()
    {
        paused = !paused;
        if (paused)
        {
            btnState = "START";
        }
        else
        {
            btnState = "PAUSE";
            if (neverInit)
            {
                neverInit = false;
                findMinSec();
                StartTimer();
            }
        }
    }

    public void findMinSec()
    {
        double intervalDetails = intervalInfo(intervalCount);
        TimeSpan interval = TimeSpan.FromMinutes(intervalDetails);
        sec = interval.TotalSeconds;
        Console.WriteLine(sec);

        if (sec % 60 != 0)
        {
            min = Math.Floor(sec / 60);
            sec = sec % 60;
        }
        else if(sec % 60 == 0)
        {

            min = sec / 60;
            sec = 0;
        }
    }


    /*https://youtu.be/JoSwm6HAYgM referenced this video for this code*/
    private void StartTimer()
    {
        bool intervalsFinished = false;
        var timer = new Timer(new TimerCallback(state =>
            {
                if (!paused && !intervalsFinished)
                {
                    if (min == 0 && sec == 0 && intervalCount == 8)
                    {
                        intervalsFinished = true;
                    }
                if (min == 0 && sec == 0 &&!intervalsFinished)
                    {
                      intervalCount++;     
                      findMinSec(); 
                 
                    }
                    if(sec == 0 && !intervalsFinished)
                    {
                        min--;
                        sec = 60;
                    }
                    if(sec > 0)
                    {
                        sec--;
                    }
                    formatTime(min, sec);
                    this.InvokeAsync(StateHasChanged);
                }
          
            }
        ), null, 0, 100);
    }

    public string formatTime(double min, double sec)
    {
        if (sec < 10)
        {
            seconds = "0" + sec.ToString();
        }
        else
        {
            seconds = sec.ToString();
        }
        if (min < 10)
        {
            minutes = "0" + min.ToString();
        }
        else
        {
            minutes = min.ToString();
        }
        time = minutes + ":" + seconds;
        return time;
    }






}
